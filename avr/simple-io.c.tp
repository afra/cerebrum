/*
 Copyright (C) 2012 jaseg <s@jaseg.de>

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 version 3 as published by the Free Software Foundation.
 */

#include <avr/io.h>

void ${init_function()} (void){
	% if device["adc"].get(member["port"]+str(member["pin"])) is not None:
		ADMUX |= (1<<REFS0) | (1<<ADLAR);
		ADCSRA |= (1<<ADEN) | ${device["adc"]["prescaler_bits"]};
	% endif
    % if member.get("mode", None) == "pwm":
        DDR${member["port"]} |= (1<<${member["pin"]});
        ${device["pwm"].get(member["port"]+str(member["pin"]))[2]}
    % elif member.get("mode", None) == "output":
        DDR${member["port"]} |= (1<<${member["pin"]});
    % endif
	% if member.get("state", None) == "high":
		PORT${member["port"]} |= (1<<${member["pin"]});
	% endif
}

% if member.get("mode", None) not in ["input", "pwm"]:
//${modulevar("state", None, "B", callbacks=(2, 2))}
void ${setter("state")} (const comm_callback_descriptor* cb, void* argbuf_end){
	uint8_t arg=((uint8_t*)cb->argbuf)[0];
	if(arg)
		PORT${member["port"]} |= (1<<${member["pin"]});
	else
		PORT${member["port"]} &= ~(1<<${member["pin"]});
	uart_putc(0x00);
	uart_putc(0x00);
}
% endif

% if member.get("mode", None) != "pwm":
void ${getter("state")} (const comm_callback_descriptor* cb, void* argbuf_end){
	uart_putc(0x00);
	uart_putc(0x01);
	uart_putc(!!(PIN${member["port"]} & (1<<${member["pin"]})));
}
% endif

% if not member.get("mode", False):
//${modulevar("direction", None, "B", callbacks=(2, 2))}
void ${setter("direction")} (const comm_callback_descriptor* cb, void* argbuf_end){
	uint8_t arg=((uint8_t*)cb->argbuf)[0];
	DDR${member["port"]} &= ~(1<<${member["pin"]});
	if(arg)
		DDR${member["port"]} |= (1<<${member["pin"]});
	else
		DDR${member["port"]} &= ~(1<<${member["pin"]});
	uart_putc(0x00);
	uart_putc(0x00);
}

void ${getter("direction")} (const comm_callback_descriptor* cb, void* argbuf_end){
	uart_putc(0x00);
	uart_putc(0x01);
	uart_putc(!!(DDR${member["port"]} & (1<<${member["pin"]})));
}
% endif

% if device["adc"].get(member["port"]+str(member["pin"])) is not None and member.get("mode", None) not in ["pwm", "output"]:
//${modulevar("analog", None, "B", callbacks=(2, None))}
void ${getter("analog")} (const comm_callback_descriptor* cb, void* argbuf_end){
	uart_putc(0x00);
	uart_putc(0x01);
#if defined(__AVR_ATmega48__) ||defined(__AVR_ATmega88__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega48P__) || defined(__AVR_ATmega88P__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega328P__)
	ADMUX &= 0xF0;
	ADMUX |= ${device["adc"].get(member["port"]+str(member["pin"]))};
#elif defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) || defined(__AVR_ATmega1280__)  || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega640__)
	ADMUX &= 0xE0;
	ADCSRB &= 0xF7;
	ADMUX |= ${device["adc"].get(member["port"]+str(member["pin"]))}&0x1F;
	ADCSRB |= ${device["adc"].get(member["port"]+str(member["pin"]))}&0x20>>2;
#endif
	ADCSRA |= (1<<ADSC);
	while(!(ADCSRA&(1<<ADSC))); //wait for conversion to finish
	uart_putc(ADCH);
	ADCSRA |= (1<<ADIF); //reset the interrupt flag
}
% endif

% if device["pwm"].get(member["port"]+str(member["pin"])) and member.get("mode", None) in ["pwm", None]:
//${modulevar("pwm", None, "B", callbacks=(2, 2))}
void ${setter("pwm")} (const comm_callback_descriptor* cb, void* argbuf_end){
	uint8_t arg=((uint8_t*)cb->argbuf)[0];
	OCR${device["pwm"].get(member["port"]+str(member["pin"]))[0]}${device["pwm"].get(member["port"]+str(member["pin"]))[1]} = arg;
	uart_putc(0x00);
	uart_putc(0x00);
}

void ${getter("pwm")} (const comm_callback_descriptor* cb, void* argbuf_end){
	uart_putc(0x00);
	uart_putc(0x01);
	uart_putc(OCR${device["pwm"].get(member["port"]+str(member["pin"]))[0]}${device["pwm"].get(member["port"]+str(member["pin"]))[1]});
}

% if member.get("mode", None) != "pwm":
//${modulevar("pwm_enabled", None, "B", callbacks=(2, 2))}
void ${getter("pwm_enabled")} (const comm_callback_descriptor* cb, void* argbuf_end){
	//FIXME not implemented
	uart_putc(0x00);
	uart_putc(0x00);
}

void ${setter("pwm_enabled")} (const comm_callback_descriptor* cb, void* argbuf_end){
	uint8_t arg=((uint8_t*)cb->argbuf)[0];
	if(arg){
		${device["pwm"].get(member["port"]+str(member["pin"]))[2]}
	}else{
		${device["pwm"].get(member["port"]+str(member["pin"]))[3]}
	}
	uart_putc(0x00);
	uart_putc(0x00);
}
% endif
% endif

